/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { TextField, Autocomplete, Link, Button } from '@mui/material';
import { LoadingButton } from '@mui/lab';
import { styled } from '@mui/material/styles';
import useAddWorkspace from './useAddWorkspace';
 
const Property1Default = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  boxShadow: `0px 4px 12px rgba(0, 0, 0, 0.25)`,  
  borderRadius: `8px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  width: `462px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `40px 30px`,  
  boxSizing: `border-box`,  
});
  
const Top = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const DeleteTop = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const AddAWorkspace = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(39, 39, 39, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
});
  
const TextFieldStandard = styled(TextField)({  
  alignSelf: `stretch`,  
  margin: `36px 0px 0px 0px`,  
});
  
const YouWillAutomatically = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 3"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `36px 0px 0px 0px`,  
}));
  
const Autocomplete1 = styled(Autocomplete)({  
  alignSelf: `stretch`,  
  margin: `36px 0px 0px 0px`,  
});
  
const DuplicateTxt = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `36px 0px 0px 0px`,  
});
  
const EachWorkspaceMemberW = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 3"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `0px`,  
}));
  
const Link1 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `0px 0px 0px 6px`,  
}));
  
const Btns = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-end`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `36px 0px 0px 0px`,  
});
  
const ButtonText = styled(Button)({  
  margin: `0px`,  
});
  
const ButtonContained = styled(LoadingButton)({  
  margin: `0px 0px 0px 40px`,  
});
 
function AddWorkspace(props) {
  const {data, fns} = useAddWorkspace();
  return (
    <Property1Default >
       <Top >
         <DeleteTop >
           <AddAWorkspace >
             {`Add a Workspace`}
               </AddAWorkspace>
         </DeleteTop>
       </Top>
       <TextFieldStandard variant="standard" size="small"  onChange={fns.onWorkspaceNameChange} onBlur={fns.onWorkspaceNameBlur} label={`Workspace Name`} helperText={data.workspaceNameError} value={data.workspaceName} error={Boolean(data.workspaceNameError)}   />
       <YouWillAutomatically >
         {`You will automatically be added as a Workspace user`}
           </YouWillAutomatically>
       <Autocomplete1  onChange = { (e, val) => {fns.addUserToWorkspace(val)}}multiple options={data.users}   autoHighlight disableClearable openOnFocus blurOnSelect getOptionLabel={(option) => option.fullName
} value={data.usersToAdd} renderInput={(params) => ( <TextField variant="standard" {...params} fullWidth  label={`Add More Team Members`}  /> )} />
       <DuplicateTxt >
         <EachWorkspaceMemberW >
           {`Each Workspace member will count as a seat.`}
             </EachWorkspaceMemberW>
         <Link1 href="#" underline="hover"  >Learn more</Link1>
       </DuplicateTxt>
       <Btns >
         <ButtonText variant="text" size="medium" color="info"  onClick={props.onClose}  > Cancel </ButtonText>
         <ButtonContained variant="contained" size="medium" color="primary"  onClick={fns.addWs} loading={data.processingStatus === "In process"} disabled={data.processingStatus ===. "In process"
}  > Add Workspace </ButtonContained>
       </Btns>
     </Property1Default>
   );
}

export default AddWorkspace;
