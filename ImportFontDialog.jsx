/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { SvgIcon, Link, Button, TextField } from '@mui/material';
import { ReactComponent as CloseFilled1 } from './assets/images/CloseFilled.svg';
import { styled } from '@mui/material/styles';
import useImportFontDialog from './useImportFontDialog';
 
const ImportFontDialog1 = styled("div")(({ theme }) =>({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  borderRadius: `8px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  width: `295px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `30px`,  
  boxSizing: `border-box`,  
  overflow: `hidden`,  
}));
  
const ModalTitleSection = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const TemplateTitle = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `16px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  width: `207px`,  
  height: `24px`,  
  margin: `0px`,  
}));
  
const Icon1 = styled(SvgIcon)(({ theme }) =>({  
  color: theme.palette["Text"]["Primary"],  
  margin: `0px 0px 0px 8px`,  
  cursor: `pointer`,  
}));
  
const TemplateSelection = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const Fonts = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px 0px 20px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const Row = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const TextField1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px`,  
  boxSizing: `border-box`,  
  width: `240px`,  
  margin: `0px`,  
});
  
const Container = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const SelectASingleWeightF = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 3"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  width: `240px`,  
  margin: `0px`,  
}));
  
const Link1 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `4px 0px 0px 0px`,  
}));
  
const ButtonContained = styled(Button)({  
  margin: `16px 0px 0px 0px`,  
});
  
const FileName = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `12px`,  
  letterSpacing: `0.20000000298023224px`,  
  textDecoration: `none`,  
  lineHeight: `20px`,  
  textTransform: `none`,  
  margin: `16px 0px 0px 0px`,  
}));
  
const Error = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Error"]["Main"],  
  fontStyle: theme.typography["Components"]["Helper Text"].fontStyle,  
  fontFamily: theme.typography["Components"]["Helper Text"].fontFamily,  
  fontWeight: theme.typography["Components"]["Helper Text"].fontWeight,  
  fontSize: theme.typography["Components"]["Helper Text"].fontSize,  
  letterSpacing: theme.typography["Components"]["Helper Text"].letterSpacing,  
  textDecoration: theme.typography["Components"]["Helper Text"].textDecoration,  
  lineHeight: theme.typography["Components"]["Helper Text"].lineHeight,  
  textTransform: theme.typography["Components"]["Helper Text"].textTransform,  
  margin: `16px 0px 0px 0px`,  
}));
  
const Inputs = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `20px 0px 0px 0px`,  
});
  
const TextFieldStandard = styled(TextField)({  
  width: `235px`,  
  margin: `0px`,  
});
  
const TextFieldStandard1 = styled(TextField)({  
  width: `235px`,  
  margin: `30px 0px 0px 0px`,  
});
  
const Frame1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `10px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ButtonContained1 = styled(Button)({  
  margin: `0px`,  
});
 
function ImportFontDialog(props) {
  const {data, fns} = useImportFontDialog();
  return (
    <ImportFontDialog1 >
       <ModalTitleSection >
         <TemplateTitle >
           {`Import Font`}
             </TemplateTitle>
         <Icon1  onClick = { props.onClose}   fontSize = { "small"}  component = { CloseFilled1}/>
       </ModalTitleSection>
       <TemplateSelection >
         <Fonts >
           <Row >
             <TextField1 >
               <Container >
                 <Input1 >
                   <SelectASingleWeightF >
                     {`Select a single weight font file.`}
                       </SelectASingleWeightF>
                   <Link1 href={https://docs.quest.ai/features/previewing-with-custom-fonts} underline="hover"  target="_blank" >Learn More</Link1>
                 </Input1>
                 <label htmlFor="file-upload">
                   <input style={{display:"none"}} accept={".otf, .ttf, .woff, .woff2"} id="file-upload" type="file" onChange={fns.onFileNameChange}/>
                   <ButtonContained variant="contained" size="small" color="primary"   component="span"  > Select Font </ButtonContained>
                 </label>
                 {(data.fontFile !== null) &&
                     <FileName >
                     {data.fontFile.name}
                       </FileName>
                 }
                 {(Boolean(data.fontFileError)) &&
                     <Error >
                     {data.fontFileError}
                       </Error>
                 }
               </Container>
             </TextField1>
             <Inputs >
               <TextFieldStandard variant="standard" size="medium"  onChange={fns.onFontFamilyChange} label={`Font Family`} placeholder={"e.g. Helvetica"} helperText={data.fontFamilyError} value={data.fontFamily} error={Boolean(data.fontFamilyError)} InputLabelProps={{shrink:true}}   />
               <TextFieldStandard1 variant="standard" size="medium"  onChange={fns.onFontWeightChange} label={`Font Weight`} placeholder={"e.g. 400 or 700 or 900"} helperText={data.fontWeightError} value={data.fontWeight} error={Boolean(data.fontWeightError)} InputLabelProps={{shrink:true}}   />
             </Inputs>
           </Row>
         </Fonts>
       </TemplateSelection>
       <Frame1 >
         <ButtonContained1 variant="contained" size="small" color="primary"  onClick={() => fns.handleImportFont(props.onClose)}  > Import </ButtonContained1>
       </Frame1>
     </ImportFontDialog1>
   );
}

export default ImportFontDialog;
