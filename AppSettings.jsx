/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { ThemeProvider, StyledEngineProvider } from '@mui/material/styles';
import questTheme from './QuestDesignSystemLightTheme';
import { Button, Link, Autocomplete, TextField, Checkbox, FormControlLabel, Dialog } from '@mui/material';
import { styled } from '@mui/material/styles';
import ExportSwitch from './ExportSwitch';
import MultiLinePlacholder from './MultiLinePlacholder';
import PickExportType from './PickExportType';
import PickFileType from './PickFileType';
import ImportFontDialog from './ImportFontDialog';
import useAppSettings from './useAppSettings';
 
const AppSettings1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: "100vh",  
  overflow: "scroll",  
});
  
const ExportSwitch1 = styled(ExportSwitch)(({ theme }) =>({  
  margin: `0px`,  
}));
  
const ExportOptions = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `702px`,  
  margin: `40px 0px 0px 0px`,  
});
  
const Title = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  margin: `0px`,  
});
  
const CodeOrRepo = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ExportYourEntire = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `241px`,  
  margin: `0px 0px 0px 16px`,  
});
  
const ExportYourEntireTxt = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const ExportEntireAppStruc = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const AutoAddedFrame = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `333px`,  
  margin: `16px 0px 0px 0px`,  
});
  
const ButtonContained = styled(Button)({  
  margin: `0px`,  
});
  
const PushToRepo = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  margin: `0px`,  
});
  
const PushToRepo1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const ExportYourEntireTxt1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `21px`,  
  margin: `0px`,  
});
  
const PushAppToYourReposit = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const AutoAddedFrame1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `10px 0px 4px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  height: `135px`,  
  margin: `14px 0px 0px 0px`,  
});
  
const MultiLinePlacholder1 = styled(MultiLinePlacholder)(({ theme }) =>({  
  alignSelf: `stretch`,  
  height: `71px`,  
  margin: `0px`,  
}));
  
const ButtonContained1 = styled(Button)({  
  margin: `20px 0px 0px 0px`,  
});
  
const LinkHint = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `21px`,  
  margin: `14px 0px 0px 0px`,  
});
  
const Link1 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `0px`,  
}));
  
const ApiKey = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  margin: `0px 0px 0px 78px`,  
});
  
const RepositorySettings = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const RepoSettings = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `12px 0px 0px 0px`,  
});
  
const RepoKey = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `12px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `442px`,  
  margin: `0px`,  
});
  
const Autocomplete1 = styled(Autocomplete)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const RepoBranch = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `442px`,  
  margin: `24px 0px 0px 0px`,  
});
  
const Autocomplete2 = styled(Autocomplete)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const RepoBranch1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `442px`,  
  margin: `24px 0px 0px 0px`,  
});
  
const Autocomplete3 = styled(Autocomplete)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const BranchPath = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `442px`,  
  margin: `24px 0px 0px 0px`,  
});
  
const Autocomplete4 = styled(Autocomplete)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const Top = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const AppSettings2 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const Divider = styled("div")({  
  backgroundColor: `rgba(229, 229, 229, 1)`,  
  height: `1px`,  
  width: `1336px`,  
  margin: `7px 0px 0px 0px`,  
});
  
const Divider1 = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `6px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
  overflow: `hidden`,  
});
  
const Divider2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  margin: `0px`,  
});
  
const Divider3 = styled("div")(({ theme }) =>({  
  backgroundColor: `rgba(224, 224, 224, 1)`,  
  flexGrow: `1`,  
  height: `1px`,  
  margin: `0px`,  
}));
  
const Column = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const Divider4 = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `6px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const Divider5 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  margin: `0px`,  
});
  
const Divider6 = styled("div")(({ theme }) =>({  
  backgroundColor: `rgba(224, 224, 224, 1)`,  
  flexGrow: `1`,  
  height: `1px`,  
  margin: `0px`,  
}));
  
const Divider7 = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `6px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
  overflow: `hidden`,  
});
  
const Divider8 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  margin: `0px`,  
});
  
const Divider9 = styled("div")(({ theme }) =>({  
  backgroundColor: `rgba(224, 224, 224, 1)`,  
  flexGrow: `1`,  
  height: `1px`,  
  margin: `0px`,  
}));
  
const ExportSettings = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const ExportColumn2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const FilesToExport = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const FilesToInclude = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const Checkboxes = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Box = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Checkbox1 = styled(Checkbox)({  
  margin: `0px`,  
});
  
const Box1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Checkbox2 = styled(Checkbox)({  
  margin: `0px`,  
});
  
const Box2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Checkbox3 = styled(Checkbox)({  
  margin: `0px`,  
});
  
const Box3 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Checkbox4 = styled(Checkbox)({  
  margin: `0px`,  
});
  
const Box4 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `10px 0px 0px 0px`,  
});
  
const Checkbox5 = styled(Checkbox)({  
  margin: `0px`,  
});
  
const ExportColumn1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `444px`,  
  margin: `0px 0px 0px 128px`,  
});
  
const ExportOptions1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ExportType = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ExportType1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const ExportType2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const ExportType3 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const CreateReactApp = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px 0px 0px 4px`,  
}));
  
const PickExportType1 = styled(PickExportType)(({ theme }) =>({  
  width: `200px`,  
  margin: `0px`,  
}));
  
const FileType = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `28px 0px 0px 0px`,  
});
  
const FileType1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const FileType2 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const Typescript = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px 0px 0px 4px`,  
}));
  
const PickFileType1 = styled(PickFileType)(({ theme }) =>({  
  width: `200px`,  
  margin: `0px`,  
}));
  
const ImageAssetsFolderInp = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
});
  
const TextFieldStandard = styled(TextField)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const DesignSystemSettings = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const DesignSystemPath = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `440px`,  
  margin: `0px`,  
});
  
const TextFieldStandard1 = styled(TextField)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ExcludeSpecificSelec = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
});
  
const Autocomplete5 = styled(Autocomplete)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const CheckBoxes = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
});
  
const Checkbox6 = styled(Checkbox)({  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const Space = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  height: `100px`,  
  margin: `40px 0px 0px 0px`,  
});
  
const ImportFontDialog1 = styled(ImportFontDialog)(({ theme }) =>({  
  width: `295px`,  
  margin: `40px 0px 0px 0px`,  
}));
 
function AppSettings() {
  const {data, fns} = useAppSettings();
  return ( 
    <StyledEngineProvider injectFirst>
      <ThemeProvider theme={questTheme}>
        <AppSettings1 >
           <ExportSwitch1   exportMethod ={data.exportSettings?.exportMethod} onClick={(val) => fns.updateExportSetting("exportMethod", val)}/>
           <ExportOptions >
             <Title >
               <CodeOrRepo >
                 {(data.exportSettings?.exportMethod === "local") &&
                     <ExportYourEntire >
                     <ExportYourEntireTxt >
                       <ExportEntireAppStruc >
                         {`Export entire App structure`}
                           </ExportEntireAppStruc>
                     </ExportYourEntireTxt>
                     <AutoAddedFrame >
                       <ButtonContained variant="contained" size="small" color="primary"  onClick={fns.handleExportApp} disabled={(!data.filesToInclude && !data.exportSettings?.includeFonts) || !data.currentApp?.designSystemPageDef}  > Export App </ButtonContained>
                     </AutoAddedFrame>
                   </ExportYourEntire>
                 }
                 {(data.exportSettings?.exportMethod === "remote") &&
                     <PushToRepo >
                     <PushToRepo1 >
                       <ExportYourEntireTxt1 >
                         <PushAppToYourReposit >
                           {`Push App to your Repository`}
                             </PushAppToYourReposit>
                       </ExportYourEntireTxt1>
                       <AutoAddedFrame1 >
                         <MultiLinePlacholder1   />
                         <ButtonContained1 variant="contained" size="small" color="primary"  onClick={fns.pushToRemoteBranch} disabled={(!data.filesToInclude && !data.exportSettings?.includeFonts) || !data.currentApp?.designSystemPageDef}  > Push App </ButtonContained1>
                       </AutoAddedFrame1>
                       <LinkHint >
                         <Link1 href="#" underline="hover"  >How to setup your Repo</Link1>
                       </LinkHint>
                     </PushToRepo1>
                     <ApiKey >
                       <RepositorySettings >
                         {`Repository Settings`}
                           </RepositorySettings>
                       <RepoSettings >
                         <RepoKey >
                           <Autocomplete1  onChange = { (e, val) => fns.setCurrentAPIKey(val)} options={data.APIKeys}   autoHighlight disableClearable openOnFocus blurOnSelect getOptionLabel={(option) => option.name || ""} value={data.currentAPIKey} renderInput={(params) => ( <TextField variant="standard" {...params} fullWidth  label={`Choose your API Key`}  /> )} />
                         </RepoKey>
                         <RepoBranch >
                           <Autocomplete2     autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="standard" {...params} fullWidth  label={`Choose your Repo`}  /> )} />
                         </RepoBranch>
                         <RepoBranch1 >
                           <Autocomplete3     autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="standard" {...params} fullWidth  label={`Choose your Branch`}  /> )} />
                         </RepoBranch1>
                         <BranchPath >
                           <Autocomplete4     autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="standard" {...params} fullWidth  label={`Choose your Path`}  /> )} />
                         </BranchPath>
                       </RepoSettings>
                     </ApiKey>
                   </PushToRepo>
                 }
               </CodeOrRepo>
             </Title>
           </ExportOptions>
           {false &&
               <Top >
               <AppSettings2 >
                 {`App Settings`}
                   </AppSettings2>
               <Divider >
               </Divider>
             </Top>
           }
           {false &&
               <Divider1 >
               <Divider2 >
                 <Divider3 >
                 </Divider3>
               </Divider2>
             </Divider1>
           }
           <Column >
             <Divider4 >
               <Divider5 >
                 <Divider6 >
                 </Divider6>
               </Divider5>
             </Divider4>
             {false &&
                 <Divider7 >
                 <Divider8 >
                   <Divider9 >
                   </Divider9>
                 </Divider8>
               </Divider7>
             }
             {(data.exportSettings && data.components) &&
                 <ExportSettings >
                 <ExportColumn2 >
                   <FilesToExport >
                     <FilesToInclude >
                       {`Files to Include`}
                         </FilesToInclude>
                     <Checkboxes >
                       <Box >
                         <FormControlLabel onChange={() => { fns.updateExportSetting("exportComponents", !data.exportComponentFiles) }}  control={<Checkbox1 checked={data.exportComponentFiles}  size="small" color="primary"/>} label={`Components`} />
                             </Box>
                       <Box1 >
                         <FormControlLabel onChange={() => { fns.updateExportSetting("exportThemes", !data.exportThemeFiles) }}  control={<Checkbox2 checked={data.exportThemeFiles}  size="small" color="primary"/>} label={`Themes`} />
                             </Box1>
                       <Box2 >
                         <FormControlLabel onChange={() => { fns.updateExportSetting("exportHooks", !data.exportHookFiles) }}  control={<Checkbox3 checked={data.exportHookFiles}  size="small" color="primary"/>} label={`Hooks`} />
                             </Box2>
                       <Box3 >
                         <FormControlLabel onChange={() => { fns.updateExportSetting("exportImages", !data.exportImageFiles) }}  control={<Checkbox4 checked={data.exportImageFiles}  size="small" color="primary"/>} label={`Images`} />
                             </Box3>
                       <Box4 >
                         <FormControlLabel onChange={() => { fns.updateExportSetting("includeFonts", !data.exportSettings.includeFonts) }}  control={<Checkbox5 checked={data.exportSettings.includeFonts  }  size="small" color="primary"/>} label={`Fonts`} />
                             </Box4>
                     </Checkboxes>
                   </FilesToExport>
                 </ExportColumn2>
                 <ExportColumn1 >
                   <ExportOptions1 >
                     <ExportType >
                       <ExportType1 >
                         <ExportType2 >
                           <ExportType3 >
                             {`Export Type:`}
                               </ExportType3>
                           <CreateReactApp >
                             {data.exportSettings.framework === "CRA" ? "Create React App" : "NextJS"}
                               </CreateReactApp>
                         </ExportType2>
                         <PickExportType1   framework={data.exportSettings.framework} onClick={(val) => fns.updateExportSetting("framework", val)}/>
                       </ExportType1>
                       <FileType >
                         <FileType1 >
                           <FileType2 >
                             {`File Type:`}
                               </FileType2>
                           <Typescript >
                             {data.language}
                               </Typescript>
                         </FileType1>
                         <PickFileType1   language={data.language} onClick={(val) => fns.updateExportSetting('fileType', val)}/>
                       </FileType>
                     </ExportType>
                     <ImageAssetsFolderInp >
                       <TextFieldStandard variant="standard" size="medium"  onChange={fns.updateField} onBlur={() => {fns.onFieldBlur("imageDir")}} label={`Image Assets Path`} name={"imageDir"} helperText={data.exportSettings.errors["imageDir"]} value={data.exportSettings.imageDir} error={Boolean(data.exportSettings.errors["imageDir"])}   />
                     </ImageAssetsFolderInp>
                     <DesignSystemSettings >
                       <DesignSystemPath >
                         <TextFieldStandard1 variant="standard" size="medium"  onChange={fns.updateField} onBlur={() => {fns.onFieldBlur("designSystemImageDir")}} label={`Design System Images Path`} name={"designSystemImageDir"} helperText={data.exportSettings.errors["designSystemImageDir"]} value={data.exportSettings.designSystemImageDir} error={Boolean(data.exportSettings.errors["designSystemImageDir"])}   />
                       </DesignSystemPath>
                     </DesignSystemSettings>
                     <ExcludeSpecificSelec >
                       <Autocomplete5  onChange = { (e, val) => {fns.updateExportSetting("compsToExclude", val)}}multiple options={data.appComponents}   autoHighlight disableClearable openOnFocus blurOnSelect getOptionLabel={(option) => option.name || ""} value={fns.getCompsToExcludeVal(data.exportSettings.compsToExclude)} renderInput={(params) => ( <TextField variant="standard" {...params} fullWidth  label={`Excluded Components`}  /> )} />
                     </ExcludeSpecificSelec>
                     <CheckBoxes >
                       <FormControlLabel onChange={() => { fns.updateExportSetting("includeReactImport", !data.exportSettings.includeReactImport) }}  control={<Checkbox6 checked={data.exportSettings.includeReactImport}  size="small" color="primary"/>} label={`Include "import React from 'react';" in every component`} />
                           </CheckBoxes>
                   </ExportOptions1>
                 </ExportColumn1>
               </ExportSettings>
             }
           </Column>
           <Space >
           </Space>
           <Dialog open={data.showImportFontDialog} onClose={fns.closeImportFontDialog}>
             <ImportFontDialog1   onClose={fns.closeImportFontDialog}/>
           </Dialog>
         </AppSettings1>
  
      </ThemeProvider>
    </StyledEngineProvider>
  );
}

export default AppSettings;
