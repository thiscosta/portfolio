/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { Button } from '@mui/material';
import TopArrowImage from './assets/images/top_arrow.png';
import { styled } from '@mui/material/styles';
import PickFileType from './PickFileType';
import useExport from './useExport';
 
const Export1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  width: `238px`,  
  height: `245px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
});
  
const Rectangle49 = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  boxShadow: `0px 4px 4px rgba(0, 0, 0, 0.25)`,  
  borderRadius: `2px`,  
  width: `238px`,  
  height: `235px`,  
  position: `absolute`,  
  left: `0px`,  
  top: `10px`,  
});
  
const ExportContent = styled("div")({  
  display: `flex`,  
  position: `absolute`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-end`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  left: `20px`,  
  top: `26px`,  
});
  
const Top = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ExportCode = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(39, 39, 39, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
});
  
const DividerBig = styled("div")({  
  backgroundColor: `rgba(218, 218, 218, 1)`,  
  height: `1px`,  
  width: `198px`,  
  margin: `14px 0px 0px 0px`,  
});
  
const FileTypeContainer = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `28px 0px 0px 0px`,  
});
  
const FileType = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const FileType1 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const Typescript = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px 0px 0px 4px`,  
}));
  
const PickFileType1 = styled(PickFileType)(({ theme }) =>({  
  margin: `12px 0px 0px 0px`,  
}));
  
const ButtonContained = styled(Button)({  
  margin: `28px 0px 0px 0px`,  
});
  
const TopArrow = styled("img")({  
  height: `19.8px`,  
  width: `19.8px`,  
  position: `absolute`,  
  left: `208px`,  
  top: `0px`,  
});
 
function Export(props) {
  const {data, fns} = useExport();
  return (
    <Export1 >
       <Rectangle49 >
       </Rectangle49>
       <ExportContent >
         <Top >
           <ExportCode >
             {`Export Code`}
               </ExportCode>
           <DividerBig >
           </DividerBig>
         </Top>
         <FileTypeContainer >
           <FileType >
             <FileType1 >
               {`File Type:`}
                 </FileType1>
             <Typescript >
               {data.language}
                 </Typescript>
           </FileType>
           <PickFileType1   language={data.language} onClick={(val) => fns.updateLanguage(val)}/>
         </FileTypeContainer>
         <ButtonContained variant="contained" size="small" color="primary"  onClick={fns.exportFn}  > Export  </ButtonContained>
       </ExportContent>
       <TopArrow  src={TopArrowImage} alt={"top arrow"}/>
     </Export1>
   );
}

export default Export;
