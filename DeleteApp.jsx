/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { TextField, Button } from '@mui/material';
import { LoadingButton } from '@mui/lab';
import VectorImage from './assets/images/Vector.png';
import { styled } from '@mui/material/styles';
import useDeleteApp from './useDeleteApp';
 
const Property1Default = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  boxShadow: `0px 4px 12px rgba(0, 0, 0, 0.25)`,  
  borderRadius: `8px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  width: `462px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `40px 30px`,  
  boxSizing: `border-box`,  
});
  
const Top = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const DeleteTop = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const DeleteApp1 = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(39, 39, 39, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
});
  
const NovaBeerMarketing = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `14px`,  
  letterSpacing: `0.15000000596046448px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px 0px 0px 6px`,  
}));
  
const Warning = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `20px 0px 0px 0px`,  
});
  
const Row = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const AlertOutlined = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  margin: `0px`,  
});
  
const UnstyledAlert = styled("div")({  
  border: `1px solid rgba(233, 78, 124, 1)`,  
  boxSizing: `border-box`,  
  borderRadius: `4px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `6px 16px`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const IconContainer = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `7px 0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Vector = styled("img")({  
  height: `18.33px`,  
  width: `18.33px`,  
  margin: `0px`,  
});
  
const Text = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `8px 0px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  margin: `0px 0px 0px 12px`,  
  overflow: `hidden`,  
});
  
const Title = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: theme.typography["Components"]["Alert Title"].fontStyle,  
  fontFamily: theme.typography["Components"]["Alert Title"].fontFamily,  
  fontWeight: theme.typography["Components"]["Alert Title"].fontWeight,  
  fontSize: theme.typography["Components"]["Alert Title"].fontSize,  
  letterSpacing: theme.typography["Components"]["Alert Title"].letterSpacing,  
  textDecoration: theme.typography["Components"]["Alert Title"].textDecoration,  
  lineHeight: theme.typography["Components"]["Alert Title"].lineHeight,  
  textTransform: theme.typography["Components"]["Alert Title"].textTransform,  
  alignSelf: `stretch`,  
  margin: `4px 0px 0px 0px`,  
}));
  
const Description = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(74, 25, 40, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ThisCannotBeUndoneIn = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(39, 39, 39, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `400`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  alignSelf: `stretch`,  
  margin: `20px 0px 0px 0px`,  
});
  
const TextFieldStandard = styled(TextField)({  
  alignSelf: `stretch`,  
  margin: `30px 0px 0px 0px`,  
});
  
const Btns = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-end`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `30px 0px 0px 0px`,  
});
  
const ButtonText = styled(Button)({  
  margin: `0px`,  
});
  
const ButtonContained = styled(LoadingButton)({  
  margin: `0px 0px 0px 40px`,  
});
 
function DeleteApp(props) {
  const {data, fns} = useDeleteApp();
  return (
    <Property1Default >
       <Top >
         <DeleteTop >
           <DeleteApp1 >
             {`Delete App:`}
               </DeleteApp1>
           <NovaBeerMarketing >
             {data.appName}
               </NovaBeerMarketing>
         </DeleteTop>
         <Warning >
           <Row >
             <AlertOutlined >
               <UnstyledAlert >
                 <IconContainer >
                   <Vector  src={VectorImage} alt={"Vector"}/>
                 </IconContainer>
                 <Text >
                   {false &&
                       <Title >
                       {`Title`}
                         </Title>
                   }
                   <Description >
                     {`Deleting this App will also delete ALL Components within the App`}
                       </Description>
                 </Text>
               </UnstyledAlert>
             </AlertOutlined>
           </Row>
         </Warning>
         <ThisCannotBeUndoneIn >
           {`This cannot be undone. In all caps, please type: DELETE`}
             </ThisCannotBeUndoneIn>
       </Top>
       <TextFieldStandard variant="standard" size="small"  onChange={fns.onDeleteAppChange} onBlur={fns.onDeleteAppBlur} label={`Type DELETE here`} helperText={data.deleteAppError} value={data.deleteAppValue} error={Boolean(data.deleteAppError)}   />
       <Btns >
         <ButtonText variant="text" size="medium" color="info"  onClick={props.onClose}  > Cancel </ButtonText>
         <ButtonContained variant="contained" size="medium" color="primary"  onClick={() => fns.deleteApp(props.appId)} loading={data.processingStatus === "In process"}  > Delete App </ButtonContained>
       </Btns>
     </Property1Default>
   );
}

export default DeleteApp;
