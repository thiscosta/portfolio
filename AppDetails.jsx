/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { TextField, Button, Link, SvgIcon } from '@mui/material';
import { ReactComponent as Delete1 } from './assets/images/Delete.svg';
import { ReactComponent as Delete2 } from './assets/images/Delete.svg';
import { ReactComponent as Delete3 } from './assets/images/Delete.svg';
import { styled } from '@mui/material/styles';
import DarkModeSwitch from './DarkModeSwitch';
import useAppDetails from './useAppDetails';
 
const AppSettings = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `center`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
});
  
const Top = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Col1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const TextFieldStandard = styled(TextField)({  
  width: `345px`,  
  margin: `0px`,  
});
  
const WorkspaceImageContai = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const WorkspaceImage = styled("img")({  
  height: `79px`,  
  width: `79px`,  
  margin: `0px`,  
});
  
const WorkspaceImageCol2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 42px`,  
});
  
const Top1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const AppImage = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const UpTo1000X1000JpgOrPn = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(161, 161, 161, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `500`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `2px 0px 0px 0px`,  
});
  
const ButtonContained = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const Col2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 60px`,  
});
  
const ExportColumn2DesignS = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `390px`,  
  margin: `0px`,  
});
  
const Top2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `390px`,  
  margin: `0px`,  
});
  
const DesignSystemSettings = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const TextFieldStandard1 = styled(TextField)({  
  width: `390px`,  
  margin: `0px`,  
});
  
const LineUpWithLeft = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `12px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  margin: `28px 0px 0px 0px`,  
});
  
const DarkMode = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const DefaultTheme = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const DarkModeSwitch1 = styled(DarkModeSwitch)(({ theme }) =>({  
  margin: `10px 0px 0px 0px`,  
}));
  
const TimeStamp = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `28px 0px 0px 0px`,  
});
  
const LastSync = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const Q26MinutesAgo = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Disabled"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 3"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `0px 0px 0px 10px`,  
}));
  
const TopTxtAndLinks = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `28px 0px 0px 0px`,  
});
  
const DuplicateAndMakeTxt = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const DuplicateTxt = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  width: `333px`,  
  margin: `0px`,  
});
  
const DuplicateMakeYourOwn = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 3"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  width: `210px`,  
  height: `21px`,  
  margin: `0px`,  
}));
  
const Link1 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `0px`,  
}));
  
const Link2 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `6px 0px 0px 0px`,  
}));
  
const DarkMode1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `28px 0px 0px 0px`,  
});
  
const DefaultTheme1 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const DarkModeSwitch2 = styled(DarkModeSwitch)(({ theme }) =>({  
  margin: `10px 0px 0px 0px`,  
}));
  
const Divider = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 1)`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `6px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `40px 0px 0px 0px`,  
  overflow: `hidden`,  
});
  
const Divider1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  flexGrow: `1`,  
  margin: `0px`,  
});
  
const Divider2 = styled("div")(({ theme }) =>({  
  backgroundColor: `rgba(224, 224, 224, 1)`,  
  flexGrow: `1`,  
  height: `1px`,  
  margin: `0px`,  
}));
  
const DisplayFonts = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const DisplayFonts1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Top3 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const DisplayFontsRow = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const SecTitleFonts = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px 0px 10px 0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const DisplayFonts2 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const QuestNativelyTxt = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `12px 0px 0px 0px`,  
});
  
const QuestNativelySupport = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 3"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  width: `438px`,  
  margin: `0px`,  
}));
  
const Link3 = styled(Link)(({ theme }) =>({  
  color: theme.palette["Primary"]["Main"],  
  fontStyle: theme.typography["Typography"]["Body 3"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 3"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 3"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 3"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 3"].letterSpacing,  
  lineHeight: theme.typography["Typography"]["Body 3"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 3"].textTransform,  
  margin: `6px 0px 0px 0px`,  
}));
  
const Fonts = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `10px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  margin: `20px 0px 0px 0px`,  
});
  
const Input1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  height: `18.37px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontFileName = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  width: `290.74px`,  
  height: `23px`,  
  margin: `0px`,  
}));
  
const FontFamilyName = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  width: `290.63px`,  
  height: `23px`,  
  margin: `0px`,  
}));
  
const FontWeight = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  width: `217.63px`,  
  height: `23px`,  
  margin: `0px`,  
}));
  
const Frame58 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Row = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-end`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const TextField1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px`,  
});
  
const Container = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontFileName1 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input3 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontName = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField3 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `176px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input4 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const Q400 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const Icon1 = styled(SvgIcon)(({ theme }) =>({  
  color: theme.palette["Text"]["Primary"],  
  margin: `0px 0px 0px 19px`,  
  cursor: `pointer`,  
}));
  
const Row1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-end`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const TextField4 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px`,  
});
  
const Container3 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input5 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontFileName2 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField5 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container4 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input6 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontName1 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField6 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `176px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container5 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input7 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const Q4001 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const Icon2 = styled(SvgIcon)(({ theme }) =>({  
  color: theme.palette["Text"]["Primary"],  
  margin: `0px 0px 0px 19px`,  
}));
  
const Row2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-end`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const TextField7 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px`,  
});
  
const Container6 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input8 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontFileName3 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField8 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `271px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container7 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input9 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const FontName2 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const TextField9 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `20px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  width: `176px`,  
  margin: `0px 0px 0px 19px`,  
});
  
const Container8 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Input10 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `23px`,  
  width: `240px`,  
  margin: `0px`,  
  overflow: `hidden`,  
});
  
const Q4002 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(0, 0, 0, 1)`,  
  fontStyle: theme.typography["Typography"]["Body 2"].fontStyle,  
  fontFamily: theme.typography["Typography"]["Body 2"].fontFamily,  
  fontWeight: theme.typography["Typography"]["Body 2"].fontWeight,  
  fontSize: theme.typography["Typography"]["Body 2"].fontSize,  
  letterSpacing: theme.typography["Typography"]["Body 2"].letterSpacing,  
  textDecoration: theme.typography["Typography"]["Body 2"].textDecoration,  
  lineHeight: theme.typography["Typography"]["Body 2"].lineHeight,  
  textTransform: theme.typography["Typography"]["Body 2"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const Icon3 = styled(SvgIcon)(({ theme }) =>({  
  color: theme.palette["Text"]["Primary"],  
  margin: `0px 0px 0px 19px`,  
}));
  
const ButtonPadding = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `30px 0px 0px 0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const ButtonContained1 = styled(Button)({  
  margin: `0px`,  
});
  
const Divider3 = styled("div")({  
  backgroundColor: `rgba(229, 229, 229, 1)`,  
  height: `1px`,  
  width: `349px`,  
  margin: `40px 0px 0px 0px`,  
});
  
const DeleteWorkspace = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const DeleteContainer = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Top4 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const DeleteApp = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const ButtonText = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ContactAdminToDelete = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(161, 161, 161, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `500`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `10px 0px 0px 0px`,  
});
 
function AppDetails(props) {
  const {data, fns} = useAppDetails();
  return (
    <AppSettings >
       <Top >
         <Col1 >
           <TextFieldStandard variant="standard" size="medium"  onChange={fns.onAppNameChange} onBlur={fns.onAppNameBlur} label={`App Name`} helperText={data.appNameError} value={data.appName} error={Boolean(data.appNameError)}   />
           <WorkspaceImageContai >
             <WorkspaceImage  src={props.appThumbnail} alt={"Workspace Image"}/>
             <WorkspaceImageCol2 >
               <Top1 >
                 <AppImage >
                   {`App Image`}
                     </AppImage>
                 <UpTo1000X1000JpgOrPn >
                   {`Up to 1000x1000 JPG or PNG`}
                     </UpTo1000X1000JpgOrPn>
               </Top1>
               <label htmlFor="file-upload">
                 <input style={{display:"none"}} accept={".png, .jpg, .jpeg"} multiple={undefined} id="file-upload" type="file" onChange={fns.handleFiles}/>
                 <ButtonContained variant="contained" size="small" color="primary"   component="span"  > Upload </ButtonContained>
               </label>
             </WorkspaceImageCol2>
           </WorkspaceImageContai>
         </Col1>
         <Col2 >
           <ExportColumn2DesignS >
             <Top2 >
               <DesignSystemSettings >
                 <TextFieldStandard1 variant="standard" size="medium"  onChange={fns.onDesignSystemNameChange} onBlur={fns.onDesignSystemNameBlur} label={`Design System Name`} helperText={data.designSystemNameError} value={data.designSystemName} error={Boolean(data.designSystemNameError)}   />
                 <LineUpWithLeft >
                   <DarkMode >
                     <DefaultTheme >
                       {`Default Theme:`}
                         </DefaultTheme>
                     <DarkModeSwitch1   userTheme={data.exportSettings?.themeMode} onClick={(val) => fns.updateExportSetting("themeMode", val)}/>
                   </DarkMode>
                   <TimeStamp >
                     <LastSync >
                       {`Last Sync: `}
                         </LastSync>
                     <Q26MinutesAgo >
                       {data.lastSync}
                         </Q26MinutesAgo>
                   </TimeStamp>
                   <TopTxtAndLinks >
                     <DuplicateAndMakeTxt >
                       <DuplicateTxt >
                         <DuplicateMakeYourOwn >
                           {`Duplicate & make your own from: `}
                             </DuplicateMakeYourOwn>
                         <Link1 href={"https://www.figma.com/community/file/912837788133317724"} underline="hover"  target="_blank" >MUI Community Kit</Link1>
                       </DuplicateTxt>
                       <Link2 href={"https://docs.quest.ai/fundamentals/customizing-and-using-the-design-kit"} underline="hover"  target="_blank" >Learn More</Link2>
                     </DuplicateAndMakeTxt>
                   </TopTxtAndLinks>
                   {false &&
                       <DarkMode1 >
                       <DefaultTheme1 >
                         {`Default Theme:`}
                           </DefaultTheme1>
                       <DarkModeSwitch2   />
                     </DarkMode1>
                   }
                 </LineUpWithLeft>
               </DesignSystemSettings>
             </Top2>
           </ExportColumn2DesignS>
         </Col2>
       </Top>
       <Divider >
         <Divider1 >
           <Divider2 >
           </Divider2>
         </Divider1>
       </Divider>
       <DisplayFonts >
         <DisplayFonts1 >
           <Top3 >
             <DisplayFontsRow >
               <SecTitleFonts >
                 <DisplayFonts2 >
                   {`Display Fonts`}
                     </DisplayFonts2>
               </SecTitleFonts>
               <QuestNativelyTxt >
                 <QuestNativelySupport >
                   {`Quest natively supports all Google Fonts. If you use any custom fonts you can import them here to accurately preview your designs. 

Import TTF, OTF & WOFF files only. Each font weight must be imported individually. This will then work for the design system & every component that uses that font & weight.`}
                     </QuestNativelySupport>
                 <Link3 href="#" underline="hover"  >Learn More</Link3>
               </QuestNativelyTxt>
             </DisplayFontsRow>
           </Top3>
           {(data.appAssets?.length > 0) &&
               <Fonts >
               <Input1 >
                 <FontFileName >
                   {`Font File Name`}
                     </FontFileName>
                 <FontFamilyName >
                   {`Font Family Name`}
                     </FontFamilyName>
                 <FontWeight >
                   {`Font Weight`}
                     </FontWeight>
               </Input1>
               <Frame58 >
                 <Row >
                   <TextField1 >
                     <Container >
                       <Input2 >
                         <FontFileName1 >
                           {appAsset.fileName}
                             </FontFileName1>
                       </Input2>
                     </Container>
                   </TextField1>
                   <TextField2 >
                     <Container1 >
                       <Input3 >
                         <FontName >
                           {appAsset.fontFamily}
                             </FontName>
                       </Input3>
                     </Container1>
                   </TextField2>
                   <TextField3 >
                     <Container2 >
                       <Input4 >
                         <Q400 >
                           {appAsset.fontWeight}
                             </Q400>
                       </Input4>
                     </Container2>
                   </TextField3>
                   <Icon1  onClick = { () => fns.handleDeleteFont(appAsset.assetId, appAsset.fileName)}   fontSize = { "medium"}  component = { Delete1}/>
                 </Row>
                 <Row1 >
                   <TextField4 >
                     <Container3 >
                       <Input5 >
                         <FontFileName2 >
                           {`Font File Name`}
                             </FontFileName2>
                       </Input5>
                     </Container3>
                   </TextField4>
                   <TextField5 >
                     <Container4 >
                       <Input6 >
                         <FontName1 >
                           {`Font Name`}
                             </FontName1>
                       </Input6>
                     </Container4>
                   </TextField5>
                   <TextField6 >
                     <Container5 >
                       <Input7 >
                         <Q4001 >
                           {`400`}
                             </Q4001>
                       </Input7>
                     </Container5>
                   </TextField6>
                   <Icon2    fontSize = { "medium"}  component = { Delete2}/>
                 </Row1>
                 <Row2 >
                   <TextField7 >
                     <Container6 >
                       <Input8 >
                         <FontFileName3 >
                           {`Font File Name`}
                             </FontFileName3>
                       </Input8>
                     </Container6>
                   </TextField7>
                   <TextField8 >
                     <Container7 >
                       <Input9 >
                         <FontName2 >
                           {`Font Name`}
                             </FontName2>
                       </Input9>
                     </Container7>
                   </TextField8>
                   <TextField9 >
                     <Container8 >
                       <Input10 >
                         <Q4002 >
                           {`400`}
                             </Q4002>
                       </Input10>
                     </Container8>
                   </TextField9>
                   <Icon3    fontSize = { "medium"}  component = { Delete3}/>
                 </Row2>
               </Frame58>
             </Fonts>
           }
         </DisplayFonts1>
         <ButtonPadding >
           <ButtonContained1 variant="contained" size="small" color="primary"  onClick={fns.handleImportFont}  > Import Fonts </ButtonContained1>
         </ButtonPadding>
       </DisplayFonts>
       <Divider3 >
       </Divider3>
       <DeleteWorkspace >
         <DeleteContainer >
           <Top4 >
             <DeleteApp >
               {`Delete App`}
                 </DeleteApp>
           </Top4>
           <ButtonText variant="text" size="small" color="info"  onClick={fns.deleteApp} disabled={data.isAdmin !== true}  > Delete </ButtonText>
           {(data.isAdmin === true) &&
               <ContactAdminToDelete >
               {`Contact Admin to Delete`}
                 </ContactAdminToDelete>
           }
         </DeleteContainer>
       </DeleteWorkspace>
     </AppSettings>
   );
}

export default AppDetails;
