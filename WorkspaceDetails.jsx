/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import React from 'react';
import { TextField, Button } from '@mui/material';
import { styled } from '@mui/material/styles';
import useWorkspaceDetails from './useWorkspaceDetails';
 
const WorkspaceSettings = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `center`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
});
  
const TextFieldStandard = styled(TextField)({  
  width: `345px`,  
  margin: `0px`,  
});
  
const Divider = styled("div")({  
  backgroundColor: `rgba(229, 229, 229, 1)`,  
  height: `1px`,  
  width: `349px`,  
  margin: `40px 0px 0px 0px`,  
});
  
const WorkspaceImageContai = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const WorkspaceImage = styled("img")({  
  height: `79px`,  
  width: `79px`,  
  margin: `0px`,  
});
  
const WorkspaceImageCol2 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px 0px 0px 42px`,  
});
  
const Top = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const WorkspaceImage1 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const UpTo1000X1000JpgOrPn = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(161, 161, 161, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `500`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `2px 0px 0px 0px`,  
});
  
const ButtonContained = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const Divider1 = styled("div")({  
  backgroundColor: `rgba(229, 229, 229, 1)`,  
  height: `1px`,  
  width: `349px`,  
  margin: `40px 0px 0px 0px`,  
});
  
const DeleteWorkspace = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `40px 0px 0px 0px`,  
});
  
const DeleteContainer = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const Top1 = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  margin: `0px`,  
});
  
const DeleteWorkspace1 = styled("div")(({ theme }) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `700`,  
  fontSize: `14px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `0px`,  
}));
  
const ButtonText = styled(Button)({  
  margin: `10px 0px 0px 0px`,  
});
  
const ContactAdminToDelete = styled("div")({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: `rgba(161, 161, 161, 1)`,  
  fontStyle: `normal`,  
  fontFamily: `Heebo`,  
  fontWeight: `500`,  
  fontSize: `12px`,  
  letterSpacing: `0px`,  
  textDecoration: `none`,  
  textTransform: `none`,  
  margin: `10px 0px 0px 0px`,  
});
 
function WorkspaceDetails(props) {
  const {data, fns} = useWorkspaceDetails();
  return (
    <WorkspaceSettings >
       <TextFieldStandard variant="standard" size="medium"  onChange={fns.onWorkspaceNameChange} onBlur={fns.onWorkspaceNameBlur} label={`Workspace Name`} helperText={data.workspaceNameError} value={data.workspaceName} error={Boolean(data.workspaceNameError)}   />
       {false &&
           <Divider >
         </Divider>
       }
       <WorkspaceImageContai >
         <WorkspaceImage  src={props.workspaceThumbnail} alt={"Workspace Image"}/>
         <WorkspaceImageCol2 >
           <Top >
             <WorkspaceImage1 >
               {`Workspace Image`}
                 </WorkspaceImage1>
             <UpTo1000X1000JpgOrPn >
               {`Up to 1000x1000 JPG or PNG`}
                 </UpTo1000X1000JpgOrPn>
           </Top>
           <label htmlFor="file-upload">
             <input style={{display:"none"}} accept={".png, .jpg, .jpeg"} multiple={undefined} id="file-upload" type="file" onChange={fns.handleFiles}/>
             <ButtonContained variant="contained" size="small" color="primary"   component="span"  > Upload </ButtonContained>
           </label>
         </WorkspaceImageCol2>
       </WorkspaceImageContai>
       <Divider1 >
       </Divider1>
       <DeleteWorkspace >
         <DeleteContainer >
           <Top1 >
             <DeleteWorkspace1 >
               {`Delete Workspace`}
                 </DeleteWorkspace1>
           </Top1>
           <ButtonText variant="text" size="small" color="info"  onClick={fns.deleteWorkspace} disabled={data.isAdmin !== true}  > Delete </ButtonText>
           {(data.isAdmin !== true) &&
               <ContactAdminToDelete >
               {`Contact Admin to Delete`}
                 </ContactAdminToDelete>
           }
         </DeleteContainer>
       </DeleteWorkspace>
     </WorkspaceSettings>
   );
}

export default WorkspaceDetails;
