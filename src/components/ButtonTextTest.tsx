/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { Button, SvgIcon } from '@mui/material';
import { ReactComponent as ArrowForwardFilled1 } from './assets/images/ArrowForwardFilled.svg';
import { styled } from '@mui/material/styles';

 
const ButtonTextTest1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
});
  
const ButtonText: any = styled(Button)({  
  margin: `0px`,  
});
 
function ButtonTextTest(): JSX.Element {
  return (
    <ButtonTextTest1 >
       <ButtonText variant="text" size="small" color="primary"   endIcon={ <SvgIcon sx={{width: "16px", height: "18px"}} component = { ArrowForwardFilled1 } />}  > Small </ButtonText>
     </ButtonTextTest1>
   );
}

export default ButtonTextTest;
