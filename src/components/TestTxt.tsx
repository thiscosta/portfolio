/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { styled } from '@mui/material/styles';
import AdornmentText from './AdornmentText';
import AdornmentIcon from './AdornmentIcon';
import Underline from './Underline';
import HelperTextTrue from './HelperTextTrue';

 
const TestTxt1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  width: `220px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
});
  
const Content: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const Input1: any = styled("div")({  
  backgroundColor: `rgba(255, 255, 255, 0.13)`,  
  borderRadius: `4px 4px 0px 0px`,  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `9px 12px 8px 12px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `0px`,  
});
  
const Label: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Secondary"],  
  fontStyle: theme.typography["Components"]["Input Label"].fontStyle,  
  fontFamily: theme.typography["Components"]["Input Label"].fontFamily,  
  fontWeight: theme.typography["Components"]["Input Label"].fontWeight,  
  fontSize: theme.typography["Components"]["Input Label"].fontSize,  
  letterSpacing: theme.typography["Components"]["Input Label"].letterSpacing,  
  textDecoration: theme.typography["Components"]["Input Label"].textDecoration,  
  lineHeight: theme.typography["Components"]["Input Label"].lineHeight,  
  textTransform: theme.typography["Components"]["Input Label"].textTransform,  
  margin: `0px`,  
}));
  
const Content1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `flex-start`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  alignSelf: `stretch`,  
  margin: `3px 0px 0px 0px`,  
});
  
const AdornStartContainer: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `1px`,  
  margin: `0px 0px 0px 8px`,  
});
  
const AdornmentStart: any = styled(AdornmentText)(({ theme }: any) =>({  
  margin: `0px`,  
}));
  
const Value: any = styled("div")(({ theme }: any) =>({  
  textAlign: `left`,  
  whiteSpace: `pre-wrap`,  
  color: theme.palette["Text"]["Primary"],  
  fontStyle: theme.typography["Components"]["Input Text"].fontStyle,  
  fontFamily: theme.typography["Components"]["Input Text"].fontFamily,  
  fontWeight: theme.typography["Components"]["Input Text"].fontWeight,  
  fontSize: theme.typography["Components"]["Input Text"].fontSize,  
  letterSpacing: theme.typography["Components"]["Input Text"].letterSpacing,  
  textDecoration: theme.typography["Components"]["Input Text"].textDecoration,  
  lineHeight: theme.typography["Components"]["Input Text"].lineHeight,  
  textTransform: theme.typography["Components"]["Input Text"].textTransform,  
  flexGrow: `1`,  
  margin: `0px`,  
}));
  
const AdornEndContainer: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  justifyContent: `center`,  
  alignItems: `center`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  height: `1px`,  
  margin: `0px 0px 0px 8px`,  
});
  
const AdornmentEnd: any = styled(AdornmentIcon)(({ theme }: any) =>({  
  margin: `0px`,  
}));
  
const Underline1: any = styled(Underline)(({ theme }: any) =>({  
  height: `1px`,  
  width: `220px`,  
  position: `absolute`,  
  left: `0px`,  
  top: `55px`,  
}));
  
const HelperTextTrue1: any = styled(HelperTextTrue)(({ theme }: any) =>({  
  alignSelf: `stretch`,  
  margin: `3px 0px 0px 0px`,  
}));
 
function TestTxt(): JSX.Element {
  return (
    <TestTxt1 >
       <Content >
         <Input1 >
           <Label >
             {`Label`}
               </Label>
           <Content1 >
             {false &&
                 <AdornStartContainer >
                 {false &&
                     <AdornmentStart   />
                 }
               </AdornStartContainer>
             }
             <Value >
               {`Value`}
                 </Value>
             {false &&
                 <AdornEndContainer >
                 {false &&
                     <AdornmentEnd   />
                 }
               </AdornEndContainer>
             }
           </Content1>
         </Input1>
         <Underline1   />
       </Content>
       {false &&
           <HelperTextTrue1   />
       }
     </TestTxt1>
   );
}

export default TestTxt;
