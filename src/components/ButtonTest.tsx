/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { Button, SvgIcon } from '@mui/material';
import { ReactComponent as ChevronRightFilled1 } from './assets/images/ChevronRightFilled.svg';
import { styled } from '@mui/material/styles';

 
const ButtonTest1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
});
  
const ButtonContained: any = styled(Button)({  
  margin: `0px`,  
});
 
function ButtonTest(): JSX.Element {
  return (
    <ButtonTest1 >
       <ButtonContained variant="contained" size="large" color="primary"   endIcon={ <SvgIcon sx={{width: "18px", height: "22px"}} component = { ChevronRightFilled1 } />}  > Large </ButtonContained>
     </ButtonTest1>
   );
}

export default ButtonTest;
