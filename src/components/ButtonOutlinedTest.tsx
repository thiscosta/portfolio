/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { Button, SvgIcon } from '@mui/material';
import { ReactComponent as ArrowBackFilled1 } from './assets/images/ArrowBackFilled.svg';
import { styled } from '@mui/material/styles';

 
const ButtonOutlinedTest1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `column`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
});
  
const ButtonOutlined: any = styled(Button)({  
  margin: `0px`,  
});
 
function ButtonOutlinedTest(): JSX.Element {
  return (
    <ButtonOutlinedTest1 >
       <ButtonOutlined variant="outlined" size="small" color="primary"   startIcon={ <SvgIcon sx={{width: "16px", height: "18px"}} component = { ArrowBackFilled1 } />}  > Small </ButtonOutlined>
     </ButtonOutlinedTest1>
   );
}

export default ButtonOutlinedTest;
