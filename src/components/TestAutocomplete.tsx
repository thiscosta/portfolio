/**********************************************************************
*
*   Component generated by Quest
*
*   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts. 
*   To preseve that abilty, always export from Quest to regenerate this file.
*   To setup props, bindings and actions, use the Quest editor
*   Code Logic goes in the hook associated with this component
*
*   For help and further details refer to: https://www.quest.ai/docs
*
*
**********************************************************************/

import { Autocomplete, TextField } from '@mui/material';
import { styled } from '@mui/material/styles';

 
const TestAutocomplete1: any = styled("div")({  
  display: `flex`,  
  position: `relative`,  
  isolation: `isolate`,  
  flexDirection: `row`,  
  width: `243px`,  
  height: `68px`,  
  justifyContent: `flex-start`,  
  alignItems: `flex-start`,  
  padding: `0px`,  
  boxSizing: `border-box`,  
  overflow: `hidden`,  
});
  
const Autocomplete1: any = styled(Autocomplete)({  
  width: `220px`,  
  position: `absolute`,  
  left: `9px`,  
  top: `8px`,  
});
 
function TestAutocomplete(): JSX.Element {
  return (
    <TestAutocomplete1 >
       <Autocomplete1     autoHighlight disableClearable openOnFocus blurOnSelect   renderInput={(params) => ( <TextField variant="standard" {...params} fullWidth  label={`Label`}  /> )} />
     </TestAutocomplete1>
   );
}

export default TestAutocomplete;
